# 本番用Docker Compose設定
# 3コンテナ構成: db, backend, frontend
version: '3.8'

services:
  # Database service
  db:
    image: postgres:15-alpine
    container_name: task-manager-db-prod
    environment:
      - POSTGRES_DB=taskmanager
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend service (production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: task-manager-backend-prod
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://postgres:password@db:5432/taskmanager
      - JWT_SECRET=your-super-secret-jwt-key-prod
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend service (production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.simple
    container_name: task-manager-frontend-prod
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_BASE_URL=http://localhost:5000/api
      - REACT_APP_ENVIRONMENT=production
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod: